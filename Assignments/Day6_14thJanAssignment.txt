1. What is a Microservice?
A. Microservices are an architectural and organizational approach to software development where software is composed of small independent services that communicate over well-defined APIs. These services are owned by small, self-contained teams. 
These services are:
Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
Highly maintainable and testable


2. What is Monolith architecture?
A. Monolithic Architecture is like a big container, wherein all the software components of an app are assembled and tightly coupled, i.e., each component fully depends on each other. 
In a monolithic architecture, each component and its associated components must all be present for code to be executed or compiled and for the software to run.


3. What is the differemce between Monolith and Microservice?
A. 
Monolith:
a. Monolithic architecture is built as one large system and is usually one code-base.
b. It is not easy to scale based on demand
c. It has shared database.
d. Large code base makes IDE slow and build time gets increase.
e. It extremely difficult to change technology or language or framework because everything is tightly coupled and depend on each other

Microservices:
a. Microservices architecture is built as small independent module based on business functionality
b. It is easy to scale based on demand.
c. Each project and module has their own database
d. Each project is independent and small in size. So overall build and development time gets decrease.
e. Easy to change technology or framework because every module and project is independent


4. Why do we need a useEffect Hook?
A. The useEffect Hook allows us to perform side effects in the functional components. Some examples of side effects are: fetching data, directly updating the DOM, and timers. 
The idea to use useEffect hook is to execute code that needs to happen during lifecycle of the component instead of on specific user interactions or DOM events.
useEffect is an alternative for lifecycle method in class components in a functional component. It can be used to execute actions when the component mounts, or certain prop or state updated for component as well as to execute code when the component is about to unmount.


5. What is Optional Chaining?
A. Optional chaining is a process for querying and calling properties, methods, and subscripts on an optional that might currently be null. If the optional contains a value, the property, method, or subscript call succeeds. If the optional is null/undefined , the property, method, or subscript call returns undefined.


6. What is Shimmer UI?
A. A shimmer UI resembles the page's actual UI, so users will understand how quickly the web or mobile app will load even before the content has shown up. It gives people an idea of what's about to come and what's happening (it's currently loading) when a page full of content/data takes more than 3 - 5 seconds to load.


7. What is the difference between a JS expression and JS statement?
A. A JS expression is any valid code that resolves into a value and can be written whenever you would expect a value. Usually expression are written in only one line.
In JS, a statement can be any of the below:
Control flow: if-else, switch, try catch, break, continue, throw etc.
functions and classes
iterations: for, while, forEach, do while etc
miscellaneous: debugger, import, export, with etc.


8. What is conditional rendering. Explain with a code example.
A. In rwact, we will oftern need to display different things based on the different conditions. In such case use use conditional rendering.
Ex:-

a = 36;

a > 10 ? <h1>Number > 10</h1> : <h1>Number <= 10</h1>


9. What is CORS?
A. Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a "preflight" request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.


10. What is async and await?
A. Async: It simply allows us to write promises-based code as if it was synchronous and it checks that we are not breaking the execution thread. It operates asynchronously via the event loop. Async functions will always return a value. It makes sure that a promise is returned and if it is not returned then JavaScript automatically wraps it in a promise which is resolved with its value.
Await: Await function is used to wait for the promise. It could be used within the async block only. It makes the code wait until the promise returns a result. It only makes the async block wait.


11. What is the use of "const json = await data.json();" in getRestaurantDetails()?
A. Once after we fetch the data from the API, if the response data received from the API is OK, then we will use the await operator with data.json() to get the data converted to json format and assign it to the json variable. Again, our async function will wait for that to complete before moving on. Once data is converted to json, we can use it to display the restaurants details by getting details from the object. 