1. What is npm?
A. npm is a package manager for nodejs.
It is an online repository for publishing open-source nodejs projects. We can use npm inorder to install or uninstall packages in the command line.


2. What is Parcel/Webpack? Why do we need it?
A. A module bundler is a tool that takes pieces of JavaScript and their dependencies and bundles them into a single file, usually for use in the browser. Ex:- Webpack, parcel etc
Parcel is a web application bundler.

We need parcel because it optimizes the number of server requests for different files by combining multiple javascript files into one file.

It also provides other features like:
Hot Module Replacement
Code splitting
Zero configuration.
Caching etc


3. What is .parcel-cache?
A. .parcel-cache is a cache folder which stores information about the project when parcel builds it so that when it rebuilds next time it doesn't have to re-parse or re-analyze everything from scratch. This is one of the key reason for parcel being so fast in development mode.


4. What is npx?
A. npx stands for Node Package Execute and it comes with the npm, when you installed npm above 5.2.0 version. It is an npm package runner that can execute any package that you want from the npm registry without even installing that package.
Ex:- npx parcel index.html


5. Difference between dependencies and devDependencies?
A. The dependencies object inside package.json consists of all those dependencies which are needed both in development and production whereas those under devDependencies are needed only for development and not in production.
Ex:- npm install react - dependency
npm install -D parcel - devDependency


6. What is Tree Shaking?
A. Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code i.e. eliminating the unused modules from the code to make the code production ready.

It relies on the import and export statements to detect if code modules are exported and imported for use between JavaScript files.

In modern JavaScript applications, we use module bundlers to automatically remove dead code when bundling multiple JavaScript files into single files. This is important for preparing code that is production ready, for example with clean structures and minimal file size.


7. What is Hot Module Replacement?
A. Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload. This can significantly speed up development in a few ways: Retain application state which is lost during a full reload. Save valuable development time by only updating what's changed.


8. List 5 superpowers of parcel and describe any 3 of them.
A. Hot Module Replacement
Minifies code
Zero config
Dev server
Diagnostics

1. Hot Module Replacement - Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload. This can significantly speed up development in a few ways: Retain application state which is lost during a full reload. Save valuable development time by only updating what's changed.

2. Minifies code - parcel minifies the code written and combines multiple files into a single file thereby reducing number of server requests.

3. Dev Server - parcel includes a development server. We just need to run parcel index.html
If we need https then we can run parcel with --https flag.


9. What is .gitignore? What should we add and not add into it?
A. .gitignore is the file where developers add the list of files or folders that should not be pushed into the git repository.

Files we need to add in .gitignore
- Operating system files
- Application files
- Language and framework files
- Files downloaded with package managers
- Credentials


10. Difference package.json and package-lock.json?
A. Package.json:
a. It contains basic information about the project.
b. It is mandatory for every project.
c. It records important metadata about the project.
d. It contains information such as name, description, author, script, and dependencies.

package-lock.json:
a. It describes the exact tree that was generated to allow subsequent installs to have the identical tree.
b. It is automatically generated for those operations where npm modifies either node_modules tree or package.json.
c. It allows future devs to install the same dependencies in the project.
d. It contains the name, dependencies, and locked version of the project. 


11. Why should I not modify package-lock.json?
A. package-lock.json is a generated file and is not designed to be manually edited. Its purpose is to track the entire tree of dependencies i.e. including dependencies of dependencies and the exact version of each dependency. You should commit package-lock. json to your code repository. Changes made to it might affect the dependencies that future developers need to install to use the code.


12. What is node_modules? Is it a good idea to push it on git?
A. When external modules are installed using npm install, those modules are downloaded from the web and copied into the node_modules folder and Node. js is trained to look for them there when they are imported.

We do not push node_modules in git because its a very huge file and pushing it into git and production will reduce the performance of the app. 

13. What is the dist folder?
A. The dist folder contains the code that we wrote in a minified form which is actually used on the production web applications.
This is obtained when we perform npx parcel build index.html.


14. What is browserslist?
A. Browserslist is a tool that allows specifying which browsers should be supported in the developed frontend app by specifying "queries" in a config file. It's used by frameworks/libraries such as React, Angular and Vue, but it's not limited to them.