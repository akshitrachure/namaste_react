1. Different ways of writing CSS.
A. 1. In a style.css file
2. SCSS
3. Inline CSS
4. Styled Components
5. Using framework or libraries like Tailwind CSS, Material UI, Ant UI, Base UI, Bootstrap, Chakra UI etc.


2. How do we configure tailwind?
A. 
- Install tailwindcss and its peer dependencies via npm, and then run the init command to generate tailwind.config.js.
	npm install -D tailwindcss postcss
	npx tailwindcss init

- Create a .postcssrc file in your project root, and enable the tailwindcss plugin.
{
  "plugins": {
    "tailwindcss": {}
  }
}

- Add the @tailwind directives for each of Tailwind’s layers to your main CSS file.
@tailwind base;
@tailwind components;
@tailwind utilities;



3.  In tailwind.config.js, what does all the keys mean(content,theme,extend,plugins)?
A. Content - The content section is where we configure the paths to all of our HTML templates, JS components, and any other files that contain Tailwind class names.

theme - The theme section of the tailwind.config.js file is where we define our project's color palette, type scale, fonts, breakpoints, border radius values, and more.

extend - If we’d like to preserve the default values for a theme option but also add new values, we add our extensions under the extend key in the theme section of the configuration file.
For example, if we want to add an extra breakpoint but preserve the existing ones, we could extend the screens property as below:

module.exports = {
  theme: {
    extend: {
      // Adds a new breakpoint in addition to the default breakpoints
      screens: {
        '3xl': '1600px',
      }
    }
  }
}

plugins - Plugins lets us register new styles for Tailwind to inject into the user's stylesheet using JavaScript instead of CSS.


4. Why do we have .postcssrc?
A. It is used to let the bundler(parcel) know that we are using tailwind css in out app and hence compile the tailwind css classes into normal css.